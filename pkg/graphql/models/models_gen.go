// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type NewUser struct {
	ForeignID *string `json:"foreign_id"`
	Email     string  `json:"email"`
	Role      Role    `json:"Role"`
	Name      *string `json:"Name"`
}

type User struct {
	ID        int        `json:"id"`
	ForeignID *string    `json:"foreign_id"`
	Email     string     `json:"email"`
	CreatedAt time.Time  `json:"created_at"`
	DeletedAt *time.Time `json:"deleted_at"`
	Role      Role       `json:"role"`
	Avatar    *string    `json:"avatar"`
	Name      *string    `json:"name"`
}

type Role string

const (
	RoleAdmin      Role = "admin"
	RoleUser       Role = "user"
	RoleSuperAdmin Role = "super_admin"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleSuperAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleSuperAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
